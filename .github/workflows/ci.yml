name: CI

# How the CI Pipeline Works
# - The CI workflow runs on all push events and pull requests.
# - For pull requests from forks (coming from a different repository), we skip jobs/actions that need secrets (e.g.,
#   publishing results, integration tests) to avoid exposing them. Only safe checks like local tests and flake8 are run.
# - For pull requests from branches in this repository, the workflow is skipped to avoid running it twice (once for the
#   push and once for the PR).
# - The full workflow (including jobs requiring secrets) runs only on pushes events to branches in this repository
on: [ push, pull_request ]
concurrency: ci-${{ github.ref }}

permissions:
  contents: read
  checks: write
  actions: read

jobs:
  build:
    name: Build, test and package
    # run this job only for push (avoiding pull requests from the same repo) or for pull requests from different repo
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    outputs:
      is_semantic_tag: ${{ steps.get_package_version.outputs.is_semantic_tag }}
      tag: ${{ steps.get_package_version.outputs.tag }}
      version: ${{ steps.get_package_version.outputs.version }}
      wheel_artifact_id: ${{ steps.wheel_artifact_upload.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv sync --frozen --no-editable --extra dev

      # Runs tests with coverage and generates coverage.xml file and test-results.xml file
      # and checks flake8 code-style formatting that is compatible with isort & black
      # see setup in pyproject.toml
      - name: Unit tests and code style check
        run: |
          uv run tox

      - name: Publish test results
        uses: dorny/test-reporter@v1
        # run this step even if a previous step failed, but only for push events or pull requests from the same repo
        if: (success() || failure()) && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository)
        with:
          name: Test results (${{ matrix.python-version }})
          path: ./test-results.xml
          reporter: 'java-junit'

      - name: Upload coverage to Codecov
        # run this step only for push events or pull requests from the same repo
        if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build wheels package
        run: |
          uv build --wheel --no-sources

      - name: Get package version
        id: get_package_version
        if: matrix.python-version == '3.10'
        run: |
          VERSION=`uv run python3 -c 'import importlib.metadata; print(importlib.metadata.version("keboola_mcp_server"))'`
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "Version = '$VERSION', Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Upload wheel package
        id: wheel_artifact_upload
        # run this step only for push events or pull requests from the same repo
        if: matrix.python-version == '3.10' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository)
        uses: actions/upload-artifact@v4
        with:
          name: keboola_mcp_server-${{ steps.get_package_version.outputs.version }}-py3-none-any.whl
          path: dist/keboola_mcp_server-${{ steps.get_package_version.outputs.version }}-py3-none-any.whl
          if-no-files-found: error
          compression-level: 0  # wheels are ZIP archives
          retention-days: 7

  integration_tests:
    name: Integration Tests
    needs: build
    # run this job only for push events (not pull requests)
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv sync --frozen --no-editable --extra dev

      - name: Find available test environment
        id: find_environment
        run: |
          echo "üîç Finding available test environment for Python ${{ matrix.python-version }}..."
          
          # Define environments for this Python version
          if [ "${{ matrix.python-version }}" = "3.10" ]; then
            ENVIRONMENTS=("env-1" "env-4" "env-7")
            TOKENS=("INTEGTEST_STORAGE_TOKEN_1" "INTEGTEST_STORAGE_TOKEN_4" "INTEGTEST_STORAGE_TOKEN_7")
            API_URLS=("INTEGTEST_STORAGE_API_URL_1" "INTEGTEST_STORAGE_API_URL_4" "INTEGTEST_STORAGE_API_URL_7")
            SCHEMAS=("INTEGTEST_WORKSPACE_SCHEMA_1" "INTEGTEST_WORKSPACE_SCHEMA_4" "INTEGTEST_WORKSPACE_SCHEMA_7")
          elif [ "${{ matrix.python-version }}" = "3.11" ]; then
            ENVIRONMENTS=("env-2" "env-5" "env-8")
            TOKENS=("INTEGTEST_STORAGE_TOKEN_2" "INTEGTEST_STORAGE_TOKEN_5" "INTEGTEST_STORAGE_TOKEN_8")
            API_URLS=("INTEGTEST_STORAGE_API_URL_2" "INTEGTEST_STORAGE_API_URL_5" "INTEGTEST_STORAGE_API_URL_8")
            SCHEMAS=("INTEGTEST_WORKSPACE_SCHEMA_2" "INTEGTEST_WORKSPACE_SCHEMA_5" "INTEGTEST_WORKSPACE_SCHEMA_8")
          else  # 3.12
            ENVIRONMENTS=("env-3" "env-6" "env-9")
            TOKENS=("INTEGTEST_STORAGE_TOKEN_3" "INTEGTEST_STORAGE_TOKEN_6" "INTEGTEST_STORAGE_TOKEN_9")
            API_URLS=("INTEGTEST_STORAGE_API_URL_3" "INTEGTEST_STORAGE_API_URL_6" "INTEGTEST_STORAGE_API_URL_9")
            SCHEMAS=("INTEGTEST_WORKSPACE_SCHEMA_3" "INTEGTEST_WORKSPACE_SCHEMA_6" "INTEGTEST_WORKSPACE_SCHEMA_9")
          fi
          
          # Try to find an available environment
          for i in "${!ENVIRONMENTS[@]}"; do
            ENV_NAME="${ENVIRONMENTS[$i]}"
            TOKEN_SECRET="${TOKENS[$i]}"
            API_URL_VAR="${API_URLS[$i]}"
            SCHEMA_VAR="${SCHEMAS[$i]}"
            
            echo "Checking environment: $ENV_NAME"
            
            # Try to claim this environment by creating a temporary file
            # This acts as a simple lock mechanism
            LOCK_FILE="/tmp/env_lock_${ENV_NAME}"
            
            # Try to create the lock file atomically
            if (set -C; echo "${{ github.run_id }}" > "$LOCK_FILE") 2>/dev/null; then
              # Successfully created lock file - we can use this environment
              ENV_IN_USE="0"
              echo "üîí Successfully claimed environment: $ENV_NAME"
            else
              # Lock file exists - check if it's our own run
              LOCK_OWNER=$(cat "$LOCK_FILE" 2>/dev/null || echo "")
              if [ "$LOCK_OWNER" = "${{ github.run_id }}" ]; then
                # We already own this lock - we can use this environment
                ENV_IN_USE="0"
                echo "üîí We already own the lock for environment: $ENV_NAME"
              else
                # Another run owns this lock
                ENV_IN_USE="1"
                echo "üîí Environment $ENV_NAME is locked by run: $LOCK_OWNER"
              fi
            fi
            
            if [ "$ENV_IN_USE" = "0" ]; then
              echo "‚úÖ Found available environment: $ENV_NAME"
              echo "environment_name=$ENV_NAME" >> $GITHUB_OUTPUT
              echo "storage_token_secret=$TOKEN_SECRET" >> $GITHUB_OUTPUT
              echo "storage_api_url_var=$API_URL_VAR" >> $GITHUB_OUTPUT
              echo "workspace_schema_var=$SCHEMA_VAR" >> $GITHUB_OUTPUT
              echo "environment_found=true" >> $GITHUB_OUTPUT
              break
            else
              echo "‚ùå Environment $ENV_NAME is currently in use"
            fi
          done
          
          # If no environment found, mark as skipped
          if [ -z "$(cat $GITHUB_OUTPUT | grep 'environment_found=true' || echo '')" ]; then
            echo "‚ùå No available environments found for Python ${{ matrix.python-version }}"
            echo "environment_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip integration tests - no environment available
        if: steps.find_environment.outputs.environment_found == 'false'
        run: |
          echo "‚è≠Ô∏è  Skipping integration tests for Python ${{ matrix.python-version }}"
          echo "All test environments for this Python version are currently in use"
          echo "This is normal when multiple PRs are running simultaneously"

      - name: Integration tests
        if: steps.find_environment.outputs.environment_found == 'true' && github.repository == github.event.repository.full_name
        env:
          INTEGTEST_STORAGE_TOKEN: ${{ secrets[steps.find_environment.outputs.storage_token_secret] }}
          INTEGTEST_STORAGE_API_URL: ${{ vars[steps.find_environment.outputs.storage_api_url_var] }}
          INTEGTEST_WORKSPACE_SCHEMA: ${{ vars[steps.find_environment.outputs.workspace_schema_var] }}
        run: |
          echo "üöÄ Running integration tests for environment: ${{ steps.find_environment.outputs.environment_name }}"
          echo "Using Python version: ${{ matrix.python-version }}"
          echo "Storage API URL: ${{ vars[steps.find_environment.outputs.storage_api_url_var] }}"
          echo "Workspace schema: ${{ vars[steps.find_environment.outputs.workspace_schema_var] }}"
          uv run tox -e integtests

      - name: Skip integration tests for forks
        # show a message when tests are skipped for forks
        if: github.repository != github.event.repository.full_name
        run: |
          echo "Integration tests skipped for fork repository"
          echo "Dependencies installed successfully - setup is working correctly"

      - name: Publish integration test results
        uses: dorny/test-reporter@v1
        # publish results only when actual tests were run (same repository)
        if: (always()) && github.repository == github.event.repository.full_name
        with:
          name: Integration test results (${{ matrix.python-version }})
          path: ./integtest-results.xml
          reporter: 'java-junit'

      - name: Cleanup environment lock
        if: always() && steps.find_environment.outputs.environment_found == 'true'
        run: |
          # Clean up the lock file for the environment we used
          ENV_NAME="${{ steps.find_environment.outputs.environment_name }}"
          LOCK_FILE="/tmp/env_lock_${ENV_NAME}"
          
          # Only remove the lock if we own it
          if [ -f "$LOCK_FILE" ]; then
            LOCK_OWNER=$(cat "$LOCK_FILE" 2>/dev/null || echo "")
            if [ "$LOCK_OWNER" = "${{ github.run_id }}" ]; then
              echo "üßπ Cleaning up lock file for environment: $ENV_NAME"
              rm -f "$LOCK_FILE"
            else
              echo "‚ö†Ô∏è  Not removing lock file - we don't own it. Owner: $LOCK_OWNER"
            fi
          fi

  deploy_to_pypi:
    needs:
      - build
      - integration_tests
    runs-on: ubuntu-latest
    if: |
      startsWith(github.ref, 'refs/tags/') &&
      needs.build.outputs.is_semantic_tag == 'true' &&
      needs.build.outputs.tag == format('v{0}', needs.build.outputs.version)
    steps:
      - name: Download wheel package
        uses: actions/download-artifact@v4
        with:
          name: keboola_mcp_server-${{ needs.build.outputs.version }}-py3-none-any.whl
          path: dist/

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
